import torch
from utils import MIRA
from torchvision.datasets import CIFAR10
import torchvision.transforms as transforms
from torch.utils.data.dataloader import DataLoader

from cifar10.networks import ResNet18_32x32

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

resnet = ResNet18_32x32(num_classes=10).to(device)
resnet.load_state_dict(
    torch.load('./cifar10/models/cifar10_resnet18_32x32_base_e100_lr0.1_default/s0/best.ckpt', map_location=torch.device('cpu'))
)

resnet.to(device)
def denorm(batch, mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010]):
    if isinstance(mean, list):
        mean = torch.tensor(mean).to(device)
    if isinstance(std, list):
        std = torch.tensor(std).to(device)

    return batch * std.view(1, -1, 1, 1) + mean.view(1, -1, 1, 1)

def norm(batch):
    return transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))(batch)

transform = transforms.Compose([
    transforms.Resize([32, 32]),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010])
    ])

root_dataset_path = './datasets/cifar10/'
dataset = CIFAR10(root=root_dataset_path, download=False, transform=transform)
test_dataset = CIFAR10(root=root_dataset_path, train=False, transform=transform)

batch_size = 128
train_loader = DataLoader(dataset, batch_size)
test_loader = DataLoader(test_dataset, batch_size)

mira_scorer = MIRA(resnet, 
                 -1, 
                 0.0, 
                 0.1, 
                 25, 
                 torch.nn.CrossEntropyLoss(), 
                 device,
                 data_norm=norm, 
                 data_denorm=denorm, 
                 clamp=True)

mira_scorer.fit(train_loader)
for el in mira_scorer.class_means:
    print(mira_scorer.class_means[el])
print("----------------------")
print(mira_scorer.compute_mira_score(test_loader))

print("DONE")
